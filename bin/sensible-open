#!/bin/sh
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/sh-sensible-open#☔
# License: MIT (See LICENSE file)

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

sensible_open () {
  eval "$(_sensibleopen_format_open_command "$@") > /dev/null &"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# *** <beg boilerplate `source_deps`: ------------------------------|
#                                                                   |

source_deps () {
  local thispth="$1"
  local prefix="."
  local depsnok=false

  _source_it () {
    local prfx="${1:-.}"
    local depd="${2:-.}"
    local file="${3:-.}"
    local path="${prfx}/${depd}/${file}"
    if command -v "${file}" > /dev/null; then
      # Use version found on PATH.
      . "${file}"
    elif [ -f "${path}" ]; then
      # Fallback on local deps/ copy.
      # NOTE: `dash` complains if missing './'.
      . "${path}"
    else
      local depstxt=''
      [ "${prfx}" != "." ] && depstxt="in ‘${prfx}/${depd}’ or "
      >&2 echo "MISSING: ‘${file}’ not found ${depstxt}on PATH."
      depsnok=true
    fi
  }

  # Allow user to symlink executables and not libraries.
  # E.g., `ln -s /path/to/bin/logger.sh /tmp/logger.sh ; /tmp/logger.sh`
  # knows that it can look relative to /path/to/bin/ for sourceable files.
  [ -n "${thispth}" ] && prefix="$(dirname -- "$(realpath -- "${thispth}")")"

  #                                                                 |
  # *** stop boilerplate> ------------------------------------------|

  _source_it "${prefix}" "./" "_sensibleopen-format-open-command"
  # In lieu of the previous command calling its source_deps,
  # which it only does when executed (not sourced), do here:
  _source_it "${prefix}" "./" "_sensibleopen-browser-nickname"

  # *** <more boilerplate: -----------------------------------------|
  #                                                                 |

  ! ${depsnok}
}

#                                                                   |
# *** end boilerplate `source_deps`> -------------------------------|

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

this_file_name='sensible-open'
shell_sourced () { [ "$(basename -- "$0")" != "${this_file_name}" ]; }
# Note that bash_sourced only meaningful if shell_sourced is true.
bash_sourced () { declare -p FUNCNAME > /dev/null 2>&1; }

if ! shell_sourced; then
  source_deps "$0"
  sensible_open "$@"
else
  bash_sourced && export -f sensible_open
  unset this_file_name
  unset -f shell_sourced
  unset -f bash_sourced
  unset -v this_file_name
fi

